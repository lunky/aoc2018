module Day12Spec where

import Day12
import Test.Hspec

spec :: Spec
spec = do
    describe "Lib" $ 
        it "should run a noop test" $ 
            1 `shouldBe` 1
    describe "parseInput" $ 
        it "should parse input into state and rules" $ do
            let input = "initial state: #..#.#..##......###...###\n\n...## => #\n..#.. => #\n.#... => #\n.#.#. => #\n.#.## => #\n.##.. => #\n.#### => #\n#.#.# => #\n#.### => #\n##.#. => #\n##.## => #\n###.. => #\n###.# => #\n####. => #"
            let expected = ("#..#.#..##......###...###",
                              [ ("...##",'#'), ("..#..", '#'), (".#...", '#'), (".#.#.", '#'), (".#.##", '#'), (".##..", '#'), (".####", '#'), ("#.#.#", '#'), ("#.###", '#'), ("##.#.", '#'), ("##.##", '#'), ("###..", '#'), ("###.#", '#'), ("####.", '#')]  )
            parseInput input `shouldBe` expected
    describe "day12process" $ do 
        it "should match test case 1" $ do 
            let rules = [("...##",'#'),("..#..",'#'),(".#...",'#'),(".#.#.",'#'),(".#.##",'#'),(".##..",'#'),(".####",'#'),("#.#.#",'#'),("#.###",'#'),("##.#.",'#'),("##.##",'#'),("###..",'#'),("###.#",'#'),("####.",'#')]
            let input =    "#..#.#..##......###...###"
            let expected = "#...#....#.....#..#..#..#"
            day12process rules input `shouldBe` expected
        it "should match test case 2" $ do 
            let rules = [("...##",'#'),("..#..",'#'),(".#...",'#'),(".#.#.",'#'),(".#.##",'#'),(".##..",'#'),(".####",'#'),("#.#.#",'#'),("#.###",'#'),("##.#.",'#'),("##.##",'#'),("###..",'#'),("###.#",'#'),("####.",'#')]
            let input =    ".#...#....#.....#..#..#..#."
            let expected = ".##..##...##....#..#..#..##"
            day12process rules input `shouldBe` expected
        it "should match test case 3" $ do 
            let rules = [("...##",'#'),("..#..",'#'),(".#...",'#'),(".#.#.",'#'),(".#.##",'#'),(".##..",'#'),(".####",'#'),("#.#.#",'#'),("#.###",'#'),("##.#.",'#'),("##.##",'#'),("###..",'#'),("###.#",'#'),("####.",'#')]
            let input =    ".##..##...##....#..#..#..##........"
            let expected = "#.#...#..#.#....#..#..#...#........"
            day12process rules input `shouldBe` expected
        it "should match test case 4" $ do 
            let rules = [("...##",'#'),("..#..",'#'),(".#...",'#'),(".#.#.",'#'),(".#.##",'#'),(".##..",'#'),(".####",'#'),("#.#.#",'#'),("#.###",'#'),("##.#.",'#'),("##.##",'#'),("###..",'#'),("###.#",'#'),("####.",'#')]
            let input = "..#.#...#..#.#....#..#..#...#.........."
            let expected = "...#.#..#...#.#...#..#..##..##........."
            day12process rules input `shouldBe` expected
            
    describe "day12" $  
         it "should match test case 1" $ do 
             let input = "initial state: #..#.#..##......###...###\n\n...## => #\n..#.. => #\n.#... => #\n.#.#. => #\n.#.## => #\n.##.. => #\n.#### => #\n#.#.# => #\n#.### => #\n##.#. => #\n##.## => #\n###.. => #\n###.# => #\n####. => #"
             day12 input `shouldBe` 325
    describe "day12b" $ 
         it "should still match test case 0" $ do 
             let input = "initial state: #..#.#..##......###...###\n\n...## => #\n..#.. => #\n.#... => #\n.#.#. => #\n.#.## => #\n.##.. => #\n.#### => #\n#.#.# => #\n#.### => #\n##.#. => #\n##.## => #\n###.. => #\n###.# => #\n####. => #"
             day12b input 20 `shouldBe` 325